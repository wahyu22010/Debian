#!/bin/bash

# Fungsi untuk mengecek dan menginstal dependencies
check_dependencies() {
    local packages=("rofi" "notification-daemon" "libnotify4")
    local missing_packages=()

    for pkg in "${packages[@]}"; do
        if ! dpkg -l | grep -q "^ii  $pkg "; then
            missing_packages+=("$pkg")
        fi
    done

    if [ ${#missing_packages[@]} -ne 0 ]; then
        echo "Installing required packages: ${missing_packages[*]}"
        apt update && apt install -y "${missing_packages[@]}"
    fi
}

# Fungsi untuk menampilkan pesan
show_message() {
    local title="$1"
    local message="$2"
    local type="${3:-normal}" # normal atau error
    
    if command -v notify-send >/dev/null 2>&1; then
        if [ "$type" = "error" ]; then
            notify-send -u critical "$title" "$message"
        else
            notify-send "$title" "$message"
        fi
    else
        # Fallback ke rofi jika notify-send tidak tersedia
        echo "$message" | rofi -e "$title"
    fi
}

# Konfigurasi rofi
configure_rofi() {
    mkdir -p ~/.config/rofi
    cat > ~/.config/rofi/config.rasi << 'EOF'
configuration {
    modi: "drun,window,run";
    width: 50;
    lines: 15;
    font: "Sans 12";
    terminal: "termux-x11";
    location: 0;
    disable-history: false;
    hide-scrollbar: true;
}

* {
    background-color: #282c34;
    border-color: #2e343f;
    text-color: #8ca0aa;
    spacing: 0;
    width: 512px;
}

inputbar {
    border: 0 0 1px 0;
    children: [prompt,entry];
}

prompt {
    padding: 16px;
    border: 0 1px 0 0;
}

entry {
    padding: 16px;
}

listview {
    cycle: false;
    margin: 0 0 -1px 0;
    scrollbar: false;
}

element {
    border: 0 0 1px 0;
    padding: 16px;
}

element selected {
    background-color: #2e343f;
}
EOF
}

# Pastikan dependencies terinstal
check_dependencies

# Konfigurasi rofi jika belum ada
[ ! -f ~/.config/rofi/config.rasi ] && configure_rofi

cd

user_dir="$PREFIX/var/lib/proot-distro/installed-rootfs/debian/home/"

# Get the username from the user directory
username=$(basename "$user_dir"/*)

# Show action selection menu using rofi
action=$(echo -e "📥 Copy .desktop file\n🗑 Remove .desktop file\n❌ Exit" | \
    rofi -dmenu -p "💼 Desktop File Manager" \
    -theme-str 'window {width: 400px;}' \
    -theme-str 'listview {lines: 3;}')

case "$action" in
    "📥 Copy .desktop file")
        # Get list of .desktop files with app names
        desktop_files=$(find "$PREFIX/var/lib/proot-distro/installed-rootfs/debian/usr/share/applications" -name "*.desktop")
        
        if [ -z "$desktop_files" ]; then
            show_message "Error" "No .desktop files found in source directory!" "error"
            exit 1
        fi

        # Create menu items with app names
        menu_items=""
        while IFS= read -r file; do
            filename=$(basename "$file")
            app_name=$(grep "^Name=" "$file" | head -1 | cut -d= -f2-)
            icon=$(grep "^Icon=" "$file" | head -1 | cut -d= -f2-)
            [ -z "$app_name" ] && app_name=$filename
            menu_items+="$app_name ($filename)\n"
        done <<< "$desktop_files"

        # Show selection menu
        selected=$(echo -e "$menu_items" | rofi -dmenu -p "📋 Select Application" \
            -theme-str 'window {width: 600px;}' \
            -theme-str 'listview {lines: 10;}')

        if [ -z "$selected" ]; then
            show_message "Cancelled" "No file selected"
            exit 0
        fi

        # Extract filename from selection
        filename=$(echo "$selected" | grep -o '([^)]*)')
        filename=${filename:1:-1}

        source_path="$PREFIX/var/lib/proot-distro/installed-rootfs/debian/usr/share/applications/$filename"
        target_path="$PREFIX/share/applications/$filename"

        # Copy and modify the .desktop file
        if cp "$source_path" "$target_path"; then
            sed -i "s|^Exec=|Exec=pd login debian --user $username --shared-tmp -- env DISPLAY=:1.0 |" "$target_path"
            show_message "✅ Success" "Application shortcut has been added successfully!"
        else
            show_message "❌ Error" "Failed to copy .desktop file!" "error"
        fi
        ;;

    "🗑 Remove .desktop file")
        # Get list of installed .desktop files
        desktop_files=$(find "$PREFIX/share/applications" -name "*.desktop")
        
        if [ -z "$desktop_files" ]; then
            show_message "Error" "No .desktop files found in target directory!" "error"
            exit 1
        fi

        # Create menu items with app names
        menu_items=""
        while IFS= read -r file; do
            filename=$(basename "$file")
            app_name=$(grep "^Name=" "$file" | head -1 | cut -d= -f2-)
            [ -z "$app_name" ] && app_name=$filename
            menu_items+="$app_name ($filename)\n"
        done <<< "$desktop_files"

        # Show selection menu
        selected=$(echo -e "$menu_items" | rofi -dmenu -p "🗑 Select Application to Remove" \
            -theme-str 'window {width: 600px;}' \
            -theme-str 'listview {lines: 10;}')

        if [ -z "$selected" ]; then
            show_message "Cancelled" "No file selected for removal"
            exit 0
        fi

        # Extract filename from selection
        filename=$(echo "$selected" | grep -o '([^)]*)')
        filename=${filename:1:-1}
        target_path="$PREFIX/share/applications/$filename"

        # Confirm deletion
        confirm=$(echo -e "Yes\nNo" | rofi -dmenu -p "🤔 Are you sure you want to remove '$filename'?" \
            -theme-str 'window {width: 400px;}' \
            -theme-str 'listview {lines: 2;}')

        if [ "$confirm" = "Yes" ]; then
            if rm "$target_path"; then
                show_message "✅ Success" "Application shortcut has been removed successfully!"
            else
                show_message "❌ Error" "Failed to remove .desktop file!" "error"
            fi
        else
            show_message "Cancelled" "Operation cancelled"
        fi
        ;;

    "❌ Exit"|"")
        show_message "👋 Goodbye" "Thank you for using Desktop File Manager"
        exit 0
        ;;
esac